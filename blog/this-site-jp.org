#+TITLE: ServantとHalogenでウェッブ開発
#+DATE: 2018-02-01
#+AUTHOR: Colin
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../assets/org-theme.css"/>

* Haskell
* Purescript

** Setup

*** Tools

The canonical dev environment for Purescript requires some use of ~npm~.
First we generate a ~package.json~, our "project level" config:

#+BEGIN_SRC bash
  npm init
#+END_SRC

Next we install some tools.
I'm usually hesitant when it comes to installing packages outside the purview
of my system's package manager, but the following will install all the tools
we need into a project-local ~node-modules~ directory:

#+BEGIN_SRC bash
  npm install purescript pulp psc-package pscid purescript-psa --save-dev
#+END_SRC

- ~purescript~: The compiler
- ~pulp~: The canonical build tool
- ~psc-package~: The package manager for Purescript libraries
- ~pscid~: A compilation daemon, similar to ~stack build --file-watch~
- ~purescript-psa~: Used by ~pulp~ to display nicer compiler errors

We'll notice these appear as dependency entries in our ~package.json~.

*** Packages

~npm~ lets us define project-local commands to use the tools we just installed.
In ~package.json~:

#+BEGIN_SRC json
    "scripts": {
      "pulp": "pulp --psc-package",
      "pscid": "pscid",
      "install": "psc-package install"
    },
#+END_SRC

Now, to generate some more scaffolding:

#+BEGIN_SRC bash
  npm run pulp init
#+END_SRC

This produces:

- ~psc-package.json~: Where we define library dependencies
- ~src/Main.purs~
- ~test/Main.purs~
** Compilation

To compile all library dependencies and our code into CommonJS-compatible Javascript:

#+BEGIN_SRC bash
  npm run pulp build
#+END_SRC

To bundle only what's needed into a single ~.js~ file:

#+BEGIN_SRC bash
  npm run pulp -- build --to app.js
#+END_SRC

To run the ~pscid~ daemon:

#+BEGIN_SRC bash
  npm run pscid
#+END_SRC

** Testing

#+BEGIN_SRC bash
  npm run pulp test
#+END_SRC

** Production

Install a Javascript minifier:

#+BEGIN_SRC bash
  npm install uglify-js --save-dev
#+END_SRC

Add an ~npm~ command for it in ~package.json~:

#+BEGIN_SRC json
  "scripts": {
      ...,
      "uglify": "uglifyjs"
  }
#+END_SRC

Minify your bundled Javascript:

#+BEGIN_SRC bash
  npm run uglify -- app.js --output min.js --compress --mangle
#+END_SRC

The behaviour of the minified code seems to be the same, and the file size
is less than half of the original human-readable code.
