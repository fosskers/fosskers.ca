#+TITLE: NixとDanteでHaskell開発
#+DATE: 2018-01-10
#+AUTHOR: こりん
#+UPDATED: 2020-03-13
#+CATEGORY: haskell

日頃のHaskell開発で使ってみるために（やっと）Nixを身につけた。下記は俺のNix設定と
開発の流れの説明。

* 最初の設定

ディストロはArch Linuxやけん、最初はAURの ~nix~ パッケージをインストールしてみたけど、
どうやらnix environmentがちゃんとできあがらんやった。 [[https://nixos.org/nix/][nixos.org]]からの [[https://nixos.org/nix/manual/#chap-quick-start][公式方法]]は逆にほぼうまくいった：

#+BEGIN_SRC bash
curl https://nixos.org/nix/install | sh
#+END_SRC

作られた ~/nix~ directoryのwrite許可を自分で正す必要もあるかしれんけん要注意。

Environment variablesを設定するscriptを確認するには：

#+BEGIN_SRC bash
less /home/colin/.nix-profile/etc/profile.d/nix.sh
#+END_SRC

このscriptはbashしか存在しないと思い込んでて俺はfishのユーザーで、少し自分で設定
を書く必要があった。 ~/home/colin/.config/fish/config.fish~ に：

#+BEGIN_SRC fish
set -x PATH ... '/home/colin/.nix-profile/bin'

# Nix
set -x NIX_PATH 'nixpkgs=/home/colin/.nix-defexpr/channels/nixpkgs'
set -x NIX_SSL_CERT_FILE '/etc/ssl/certs/ca-certificates.crt'
#+END_SRC

最後の行はディストロによって違うけん、上で言った ~nix.sh~ の中身で確認しとってね。

* Haskellの詳細

Nixでのプロジェクト設定は一般的にどんな感じか解るには [[https://github.com/Gabriel439/haskell-nix][Gabriel GonzalesのNix初心者ガイド]](英語）はなかなか
いい資源。

下記は簡単なプロジェクト向き：benchmarksとprofilingがしたい一つのlibraryかプログラム。
TravisCIとの統合、Emacsでの使い方の説明も含めてる。

** Nix設定の自動生成

プロジェクトの中で ~cabal2nix~ を使って、「nix expressions」を ~.cabal~ から作り出せる。
インストールするには：

#+BEGIN_SRC bash
nix-env -i cabal2nix
#+END_SRC

で、Nix設定を作り出そう：

#+BEGIN_SRC bash
cabal2nix . > default.nix
#+END_SRC

~.cabal~ が変わる度にせんといかんさね。

むしろ ~hpack~ が好みやったら：

#+BEGIN_SRC bash
nix-env --install --attr nixpkgs.haskellPackages.hpack
#+END_SRC

と：

#+BEGIN_SRC bash
hpack && cabal2nix . > default.nix
#+END_SRC

または ~fish~ で：

#+BEGIN_SRC fish
hpack; cabal2nix . > default.nix
#+END_SRC

** Nix Shellでの開発

Nixでのプロジェクトは三つのファイルで完成する：

- ~default.nix~
- ~shell.nix~
- ~release.nix~

が、普通の開発で最初の二つだけが必要になってくる。
~nix-shell~ を使えばプロジェクトだけのdependenciesが入ってくる
秘密森みたいな環境ができあがる。中にはいつも通り ~cabal test~ と ~cabal bench~
が使えて、他のプロジェクトのdependenciesなどが邪魔して来ない。

プロジェクトに下記の内容の ~shell.nix~ ファイルを作れば ~nix-shell~ が利用できるようになる：

#+BEGIN_SRC nix
let nixpkgs = import <nixpkgs> {};
    orig = nixpkgs.pkgs.haskellPackages.callPackage ./default.nix {};
in (nixpkgs.pkgs.haskell.lib.doBenchmark orig).env
#+END_SRC

よく見ると、本プロジェクトに関係するファイルの名前などが一切参考されていない・・・
ということは、これと全く同じ内容のファイルをどのプロジェクトでも使える。

注意： ~doBenchmark~ の部分がないと、benchmarkのdependenciesがshellに入って
来ない。

** ~release.nix~ の定義

Travisの時と正式にパッケージをあるNix Storeにインストールしたい時に
必要になってくる。例えばパッケージが「vectortiles」というと：

#+BEGIN_SRC nix
let
  config = {
    packageOverrides = pkgs: {
      haskellPackages = pkgs.haskellPackages.override {
        overrides = haskellPackagesNew: haskellPackagesOld: {
          vectortiles = haskellPackagesNew.callPackage ./default.nix { };
        };
      };
    };
  };

  pkgs =
    import <nixpkgs> { inherit config; };

in
  { vectortiles = pkgs.haskellPackages.vectortiles;
  }
#+END_SRC

もっと短いのもあるけど、設定を [[https://github.com/Gabriel439/haskell-nix/blob/master/project1/README.md#changing-versions][より細かく変えたい時]]にこの形が便利。

プロジェクトを丸ごとコンパイル：

#+BEGIN_SRC bash
nix-build release.nix
#+END_SRC

コンパイル方の細かい選択肢は [[https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/haskell-modules/lib.nix][こちら]]。

** Profiling

具体的にコードのどこが遅かったりすると知りたい時にprofilingやね。
Nixでこれが結構楽。まず ~/home/you/.config/nixpkgs/config.nix~ を新しく作って、この内容を入れる：

#+BEGIN_SRC nix
{
  packageOverrides = super: let self = super.pkgs; in
  {
    profiledHaskellPackages = self.haskellPackages.override {
      overrides = self: super: {
        mkDerivation = args: super.mkDerivation (args // {
          enableLibraryProfiling = true;
        });
      };
    };
  };
}
#+END_SRC

で、profileしたいプロジェクトで ~profiling-shell.nix~ を新しく：

#+BEGIN_SRC nix
let nixpkgs = import <nixpkgs> {};
    orig = nixpkgs.pkgs.profiledHaskellPackages.callPackage ./default.nix {};
in (nixpkgs.pkgs.haskell.lib.doBenchmark orig).env
#+END_SRC

普通の ~shell.nix~ と殆ど一緒。ただ今回はさっき書いた ~profiledHaskellPackages~ の部分
も含めてる。 ~nix-shell profiling-shell.nix~ をしてみると、profiling用のdependenciesが
全てコンパイルし直される。一回目じゃかなり時間かかる。

俺が調べた限り、普通のNix Storeにあったdependenciesがまだ健在。いつも通り ~nix-shell~ を
使うとprofiling用のdependenciesは使われない。

注意： ~nix-collect-garbage -d~ をしない事！すると時間をかけてコンパイルしたprofiling用の
dependenciesが全部なくなる。

よし何かprofileしよう・・・　作りよるのはlibraryやったらbenchmarksのexecutableでよかろうか？
方法：

- ~-prof~ と ~-fprof-auto~ をbenchmarkのGHC optionsに追加
- ~default.nix~ を生成し直す
- Profiling shellに入る: ~nix-shell profiling-shell.nix~
- ~cabal configure --enable-library-profiling --enable-benchmarks~
- ~cabal build~
- ~dist/build/projname/projname-bench +RTS -p~
- できた ~projname-bench.prof~ の中身を見る

(上でprojnameは勿論、あなたが作りよるプロジェクトの名前）

結果によるとコードを訂正したり、普通の ~nix-shell~ で開発を進めれる。

* Emacsでの使用

~dante-mode~ は色々と助けてくれる。
プロジェクトに ~shell.nix~ と ~default.nix~ が確認されると自動的にDanteが発動する。
ま、まずインストールせんと。

** ~Dante~ をインストール

普通のEmacsやったら [[https://github.com/jyp/dante#installation][こちら]]。

Spacemacs（の ~develop~ branch!）のユーザーだと、そのままDanteが使える。
~.spacemacs~ でHaskell Layerをこう設定しよう：

#+BEGIN_SRC lisp
  (haskell :variables haskell-completion-backend 'dante)
#+END_SRC

そして ~dotspacemacs/user-config~ にこれを追加：

#+BEGIN_SRC lisp
  (add-hook 'dante-mode-hook 'flycheck-mode)
#+END_SRC

これがないとDanteの機嫌が悪くなる。

DanteにREPLがない。いつもの ~SPC m s b~ も何もせん。ある関数を試すには：

#+BEGIN_SRC haskell
  -- >>> foo 5
  foo :: Int -> String
  foo = show
#+END_SRC

コメントの所に ~SPC m s e~ したら、コードはこう変わる：

#+BEGIN_SRC haskell
  -- >>> foo 5
  -- "5"
  foo :: Int -> String
  foo = show
#+END_SRC

これさえできればDanteの論理によるとREPLが要らないそうだ。

** Danteとtestsとbenchmarks

上の設定だけでDanteはtestのbenchmarkのファイルでちゃんと発動しない。
Emacsの「file-local variables」を使えばこの問題を避けれる。

~vectortiles~ というプロジェクトで ~Test.hs~ というファイルがあるとして、まず開いてみる。
~add-file-local-variable-prop-line~ というEmacs関数を使うと選択肢が出る。
~dante-target~ を選んでこれを ~vectortiles-test~ (~.cabal~ の中との同じ名前)に設定すると、
ファイルの最初の行にこのコメントが現れる：

#+BEGIN_SRC haskell
  -- -*- dante-target: "vectortiles-test"; -*-
#+END_SRC

この後 ~Test.hs~ を開く度にDanteがちゃんと発動する。

* 継続的インテグレーション

やっぱりTravisが一番？

** Travis

[[https://docs.travis-ci.com/user/languages/nix/][公式の指示]]

結構簡単。パッケージが ~vectortiles~ というと、この ~.travis.yml~ で十分：

#+BEGIN_SRC yaml
  sudo: true  # 「Docker抜き」。こうやった方がかなり速い。
  language: nix
  script: nix-build --attr vectortiles release.nix
#+END_SRC

期待通り、testが失敗するとCIも失敗する。Dependenciesが毎回ダウンロードされる割に
数分で終始するはず。

~hpack~ も混ぜたかったらどうぞ：

#+BEGIN_SRC yaml
  sudo: true

  language: nix

  before_install: nix-env --install --attr nixpkgs.haskellPackages.hpack

  script:
    - hpack
    - nix-build --attr vectortiles release.nix
#+END_SRC

** Hercules

[[https://github.com/hercules-ci/hercules][Github repository]].

NixのためだけのCIシステム。極新しくて、「1.0」が [[https://github.com/hercules-ci/hercules/issues/5][まだまだ遠いみたい]]。

** CircleCI

CircleCIではHaskellのCIは [[https://circleci.com/docs/1.0/language-haskell/][一応できる]]けどNixは優先されてないようだ。
一人ぐらいは [[https://discuss.circleci.com/t/caching-root-directory-nix-not-working/10626][頑張ってるみたい]]やけど。

** Hydraを自分で

[[https://nixos.org/hydra/][公式サイト]]

Nixと言えば当たり前かもしれんけど、俺みたいな平凡開発者には複雑すぎる。

* Stackとの比べ

「慣れとるのと違う、諦めよう」とかせずに、しばらくはNixとDanteで頑張ってみたかった。
あるプロジェクトを丸ごとstackからNixに移してから、次のNix/Danteの長所が見えてきた：

- 普通開発の時も、CIの時も、Herokuなどに展開する時も、dependencyダウンロードの速さ
- Travis設定の簡単さ
- Haskellじゃないdependenciesの整理
- [[https://github.com/sol/doctest][doctest]]との協力。 Danteで作ったコメントがあれば：

#+BEGIN_SRC haskell
  -- | この関数は何とかこうとか。
  --
  -- >>> inc 1
  -- 2
  inc :: Int -> Int
  inc n = n + 1
#+END_SRC

このシンタックスも ~doctest~ に理解されて、関数の正当性の証明にもなる。
~inc~ が変わって証明が崩れると、何かの間違いにすぐ気づかされる。

そしてStack/Interoの長所：

- インストールの簡単さ（特に初心者にとって）
- プロジェクト設定の簡単さ（最小限、 ~stack.yaml~ は一つの行で十分）
- Nixより「コンパイルは絶対成功する」という保証が強い
- ~intero~ の設定は簡単で、Danteより機能が多い
- ~cabal~ にない ~stack~ の様々な機能：
  - File watchが便利すぎる: ~stack build --haddock-deps --test --file-watch --fast~
  - ~stack test~ と ~stack bench~ が短くて解りやすい
  - オフライン・ドキュメンテーション: ~stack haddock --open foobar~
  - Dependency graphs: ~stack dot --external --prune base,ghc-prim,integer-gmp,deepseq,array | dot -Tjpg -o deps.jpg~
  - ~stack upload .~

* 資源

- [[https://nixos.org/nixpkgs/manual/#users-guide-to-the-haskell-infrastructure][NixのHaskellパッケージ公式ガイド]]
- [[https://github.com/Gabriel439/haskell-nix][Gabriel GonzalesのNix初心者ガイド]]
- [[http://vaibhavsagar.com/blog/2018/01/03/static-haskell-nix/][Building static Haskell binaries]]
- Emacsの [[https://github.com/jyp/dante][dante-mode]]
