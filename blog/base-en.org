#+TITLE: Tracking Changes to Base
#+DATE: 2020-03-05
#+AUTHOR: Colin

The [[https://matrix.hackage.haskell.org/#/package/versions][Hackage Matrix Builder]] is a great way to track how compatible a library is
with historical versions of GHC (and therefore ~base~).

As a library author, if you've [[https://matrix.hackage.haskell.org/#/package/microlens-aeson][ever]] [[https://matrix.hackage.haskell.org/#/package/snap-core][attempted]] [[https://matrix.hackage.haskell.org/#/package/lens][to]] [[https://matrix.hackage.haskell.org/#/package/sqlite-simple][support]] more than the most
recent versions of GHC, then you've been tossed around the ocean of
~Applicative~, ~Semigroup~, and ~MonadFail~, with CPP as your only olive branch.

This post is a reference for library authors to easily track how ~base~ evolves,
and how to deal with its changes. This is so that we don't all have to repeat
the same labour of digging through GHC release notes or the ~base~ CHANGELOG to
find out what works. I will update this post as time goes on, so please feel
free to bookmark it or even [[https://github.com/fosskers/fosskers.ca][help update it]].

* Compatibility Chart

|  GHC | ~base~ version | Stackage LTS | Notable Changes                         |
|------+----------------+--------------+-----------------------------------------|
|  8.8 |           4.13 |           15 | ~MonadFail~ exported by ~Prelude~       |
|      |                |              | ~fail~ removed from ~Monad~             |
|------+----------------+--------------+-----------------------------------------|
|  8.6 |           4.12 |           14 | ~-funclutter-valid-hole-fits~ available |
|      |                |              | ~deriving via~ available                |
|------+----------------+--------------+-----------------------------------------|
|  8.4 |           4.11 |           12 | ~Semigroup~ is superclass of ~Monoid~   |
|      |                |              | ~Semigroup~ exported by ~Prelude~       |
|------+----------------+--------------+-----------------------------------------|
|  8.2 |           4.10 |           11 | ~DerivingStrategies~ available          |
|------+----------------+--------------+-----------------------------------------|
|  8.0 |            4.9 |            9 | ~MonadFail~ enters ~base~               |
|      |                |              | ~Semigroup~ enters ~base~               |
|------+----------------+--------------+-----------------------------------------|
| 7.10 |            4.8 |            6 | ~Applicative~ is superclass of ~Monad~  |
|      |                |              | ~Applicative~ exported by ~Prelude~     |
|------+----------------+--------------+-----------------------------------------|

* Compatibility Pearls

** Intent: For ~base~ earlier than ~4.n~, do X

#+begin_src haskell
  {-# LANGUAGE CPP #-}

  #if !MIN_VERSION_base (4,n,0)
  import FooBar
  #endif
#+end_src

** Backwards-compatible ~Monoid~ Instances

#+begin_src haskell
  {-# LANGUAGE CPP #-}

  #if !MIN_VERSION_base(4,11,0)
  import Data.Semigroup
  #endif

  instance Semigroup Foo where
    a <> b = ...

  instance Monoid Foo where
    mempty = ...

  #if !MIN_VERSION_base(4,11,0)
    mappend = (<>)
  #endif
#+end_src

** Misc. Ecosystem Pearls

*** Minimal dependencies for ~these~

As of ~these-1~ the project underwent a structural change. Its extended
dependency graph is now "opt out", and the following can be added to a
~stack.yaml~ to accomplish this:

#+begin_src yaml
  flags:
    these:
      aeson: false
      assoc: false
      semigroupoids: false
      QuickCheck: false
#+end_src

*** Minimal dependencies for ~witherable~

~wither :: Applicative f => (a -> f (Maybe b)) -> t a -> f (t b)~ is a
convenient function from the ~witherable~ package. As of 2020 December, the core
typeclass and functions are available with minimal dependencies via the
~witherable-class~ library.

** TODOs

- Cabal File: Examples of conditional dependencies based on GHC version.
